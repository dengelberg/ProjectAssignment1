library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
names(BodyWeight)
head(BodyWeight)
levels(BodyWeight$Rat)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
remove(airquality)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(votes, rating, data = movies)
set.seed(1234)
par(mar = c(0, 0, 0, 0)
library(swirl)
swirl()
dist(dataFrame)
hclust(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
hc
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = .4, col = "red")
4
5
12
abline(h = .05, col = "green")
dist(dFsm)
plot(hc)
plot(as.dendrogram(hc))
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
heatmap(mt)
heatmap(as.numeric(mt))
as.numeric(mt)
heatmap(as.numeric(mt))
heatmap(mt)
heatmap(data.frame(mt))
next()
heatmap(mt)
heatmap(x = mt)
heatmap(x = as.numeric(mt)
)
class(mt)
heatmap(mt)
info()
skip()
swirl()
swirl()
swirl()
swirl()
swirl()
swirl(0)
dist(dataFrame)
hclust(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = .4, col = "red")
5
12
abline(h = .05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
heatmap(as.numeric(mt)
)
heatmap(as.matrix(mt))
heatmap(as.numeric(mt))
class(as.numeric(mt)[1,2])
class(as.numeric(mt))
heatmap(mt)
heatmap(mt)
mt
skip()
swirl()
swril()
swril()
swirl()
dist(dataFrame)
hc <- hclust(distxu)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = .4, col = "red")
5
12
abline(h = .05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
class(mt) <- "numeric"
heatmap(mt)
mt
denmt
plot(dempt)
plot(denmt)
distmt
library(swirl)
swirl()
cmat
point(cx,cy, col = c("red", "orange", "purple"). pch = 3, cex = 2, lwd = 2)
point(cx,cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
points(cx,cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
which.min(distTmp, 2, which.min)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x,y, newCx, newCy)
apply(distTmp2, 2, which,min)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(y, newClust2, mean)
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black","red","green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd$v[,1]
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2
svd2$vp[,1:2]
svd2$v[,1:2]
svd$d
svd2$d
dim(faceData)
a1 <- (svd1$u[,1]) %*% (svd1$d[1]) * svd1$v
a1 <- (svd1$u[,1]) * (svd1$d[1]) %*% svd1$v
a1 <- (svd1$u[,1]) * (svd1$d[1]) * svd1$v
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1:2] * svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- (svd1$u[,1:2] %*% svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
swirl()
library(swirl)
swirl()
dim(ssd)
names(ssd[562,563])
names(ssd[562:563])
rable(ssd$suject)
table(ssd$suject)
table(ssd$subject)
sum(talbe$subject))
sum(talbe(ssd$subject))
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[1:12])
myedit("showXR.R")
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = 0)
myplclust(hclustering, lab.col = unclass(sub$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[, -c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1$c([,10:12],macCon))
mdist <- dist(sub1$c([10:12],macCon))
mdist <- dist(c(sub1[10:12], sub1$macCon))
mdist <- dist(c(sub1[10:12], sub1$maxCon))
mdist <- dist(sub1[10:12])
mdist <- dist(sub1[,c(10:12)maxCon])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[, -c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- table(kClust$cluster, sub1$activity, nstart = 100)
kClust <- kmeans(kClust$cluster, sub1$activity, nstart = 100)
kClust <- kmeans(sub1[, -c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- kClust$size == 29
laying <- which(kClust$size == 29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
names
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(in.na(x0))
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log(x0), log(x1))
boxplot(log10(x0), log10(x1))
negative <- x1 < 0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(date[negative], "month")
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(h = mediaum(x0sub, na.rm = TRUE), lwd = 2)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Vale, State.Code, mean, na.rm= TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm= TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm= TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.fram(state = names(mn0), mean = mn0)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5,2.5))
)
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y, ]
getwd()
setwd('./coursera/datascience')
seted('./reproducableresearch')
dir()
seted('./ReproducableResearch')
setwd('./ReproducableResearch')
getwd()
setwd('./ReproducableResearch')
setwd('./ReproduceableResearch')
dir.create("CourseProject1")
setwd('./courseproject1')
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl, './ActivityData')
download.file(fileUrl, './ActivityData.csv')
activityData <- read.csv('./activityData.csv')
head(activityData)
activityData <- read.csv('./activityData.csv')
download.file(fileUrl, './ActivityData.zip')
zip.unpack('./ActivityData.zip','.')
unzip('./ActivityData.zip')
dir()
activityData <- read.csv('./activity.csv')
dim(activityData)
str(activityData)
head(activityData, 50)
range(activityData$steps)
range(activityData$steps, na.rm = TRUE)
summary(activityData)
stepDays <- with(activityData, tapply(steps, day, sum)
)
stepDays <- with(activityData, tapply(steps, date, sum))
dim(stepDays)
head(stepDays)
NA + 1
stepDays <- with(activityData, tapply(steps, date, sum, na.rm = TRUE))
head(stepDays)
hist(stepDays)
hist(stepDays, breaks = 8)
mean(stepDays)
median(stepDays)
stepIntervals <- with(activityData, tapply(steps, interval, mean, na.rm = TRUE))
dim(stepIntervals)
head(stepIntervals)
plot(stepIntervals, type = 'ln')
plot(stepIntervals, type = 'ln', xlab = "Interval in Day", ylab = "Average Number of Steps", main = "Step Activity Over Course of Day")
max(stepIntervals)
names(max(stepIntervals))
index(max(stepIntervals))
filter(stepIntervals = max(stepIntervals))
which(stepIntervals == max(stepIntervals))
stepIntervals[835]
stepIntervals[2]
stepIntervals[104]
length(stepIntervals)
which(stepIntervals == max(stepIntervals))
x <- which(stepIntervals == max(stepIntervals))
x
x + 1
names(x)
as.numeric(names(x))
sum(is.na(activityData$steps))
activities2 <- activityData
if(is.na(activities2$steps)) {activities2$steps}
stepIntervals$10
stepIntervals[3]
stepIntervals(names)
head(names(stepIntervals))
head(if(is.na(activities2$steps)) {names(stepIntervals)}
)
if(is.na(activities2$steps)) {names(stepIntervals)}
for(i in 1:nrow(activities2)) {if(is.na(activities2$steps[i])){activities2$steps[i] <- stepIntervals[i]}}
head(activities2)
stepDays2 <- with(activityData, tapply(steps, date, sum, na.rm = TRUE))
hist(stepDays2, breaks = 8)
stepDays <- with(activityData, tapply(steps, date, sum, na.rm = TRUE))
hist(stepDays, breaks = 8, xlab = )
hist(stepDays2, breaks = 8, xlab = "Steps", ylab = "Total Days", main = "Distribution of Steps Taken Each Day w/ Imputed Values")
?weekdays
activities2$daytype <- weekdays(activities2$date)
activities2$daytype <- weekdays(as.date(activities2$date))
activities2$daytype <- weekdays(as.POSIXct(activities2$date))
head(activities2$daytype)
levels(activities2$daytype)
str(activities2$daytype)
tail(activities2$daytype)
tail(as.numeric(activities2$daytype))
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
if(activities2$daytype %in% weekdays1) {activities2$daytype <- "weekday"} else {activities2$daytype <- "weekend"}
head(activities2)
tail(activities2)
summary(activities2)
weekdayAct <- filter(activities2, daytype = "weekday")
weekdayAct <- filter(activities2, daytype == "weekday")
weekdayAct <- filter(activities2, activities2$daytype = "weekday")
weekdayAct <- filter(activities2, activities2$daytype == "weekday")
dim(weekdayAct)
dim(activities2)
weekendAct <- filter(activities2, activities2$daytype == "weekend")
dim(weekendAct)
weekendAct <- filter(activities2, activities2$daytype = "weekend")
weekendAct <- filter(activities2, daytype = "weekend")
dim(weekendAct)
head(activities2$daytype)
weekendAct <- filter(activities2, daytype = "weekend")
weekendAct <- filter(activities2, daytype == "weekend")
library(dplyr)
weekendAct <- filter(activities2, daytype == "weekend")
weekdayAct <- filter(activities2, daytype == "weekday")
dim(weekdayAct)
dim(weekendAct)
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
act <- activities2$daytype %in% weekdays1
mean(act)
head(act)
activities2$daytype <- weekdays(as.POSIXct(activities2$date))
act <- activities2$daytype %in% weekdays1
head(act)
mean(act)
if(activities2$daytype %in% weekdays1){
activities2$daytype <- "weekday"
}
else {
activities2$daytype <- "weekend"
}
head(activity2$daytype)
head(activities2$daytype)
activities2$daytype <- weekdays(as.POSIXct(activities2$date))
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
if(activities2$daytype %in% weekdays1){
activities2$daytype <- "weekday"
} else {
activities2$daytype <- "weekend"
}
head(activities2$daytype)
levels(activities2$daytype)
attributes(activities2$daytype)
attributes(activities2)
head(activities2$daytype, 1000)
str(activities2)
summary(activities2)
weekendAct <- filter(activities2, daytype == "weekend")
weekdayAct <- filter(activities2, daytype == "weekday")
dim(weekendAct)
activities2$daytype <- weekdays(as.POSIXct(activities2$date))
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
for(i in 1:length(activities2$daytype)){
if(activities2$daytype[i] %in% weekdays1){
activities2$daytype[i] <- "weekday"
} else {
activities2$daytype[i] <- "weekend"
}
}
weekendAct <- filter(activities2, daytype == "weekend")
weekdayAct <- filter(activities2, daytype == "weekday")
dim(weekendAct)
activities2$daytype <- weekdays(as.POSIXct(activities2$date))
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
for(i in 1:length(activities2$daytype)){
if(activities2$daytype[i] %in% weekdays1){
activities2$daytype[i] <- "weekday"
} else {
activities2$daytype[i] <- "weekend"
}
}
library(dplyr)
weekendAct <- filter(activities2, daytype == "weekend")
weekdayAct <- filter(activities2, daytype == "weekday")
weekendIntervals <- with(weekendAct,
tapply(steps, interval, mean, na.rm = TRUE))
weekdayIntervals <- with(weekdayAct,
tapply(steps, interval, mean, na.rm = TRUE))
weekendSteps <- which(weekendIntervals == max(weekendIntervals))
weekendIntv <- as.numeric(names(which(weekendSteps)))
weekdaySteps <- which(weekdayIntervals == max(weekdayIntervals))
weekdayIntv <- as.numeric(names(which(weekdaySteps)))
stepIntervals <- with(activityData, tapply(steps, interval, mean, na.rm = TRUE))
maxSteps <- which(stepIntervals == max(stepIntervals))
maxIntv <- as.numeric(names(which(maxSteps)))
plot(stepIntervals, type = 'ln', xlab = "Interval in Day", ylab = "Average Number of Steps", main = "Step Activity Over Course of Day")
plot(stepIntervals, type = 'ln', xlab = "Interval in Day", ylab = "Average Number of Steps", main = "Step Activity Over Course of Weekdays and Weekends")
plot(weekendIntervals, type = 'ln', xlab = "Interval in Day",
ylab = "Average Number of Steps",
main = "Step Activity Over Course of Weekdays and Weekends",
col = "red")
points(weekdayIntervals, type = 'ln', col = "blue")
plot(weekdayIntervals, type = 'ln', xlab = "Interval in Day",
ylab = "Average Number of Steps",
main = "Step Activity Over Course of Weekdays and Weekends",
col = "red")
points(weekendIntervals, type = 'ln', col = "blue")
legend("upperright", c("weekday","weekend"), lty = c(1,1), col = ("red","blue"))
legend("upperright", c("weekday","weekend"), lty = c(1,1), col = c("red","blue"))
legend("topright", c("weekday","weekend"), lty = c(1,1), col = c("red","blue"))
activityData <- read.csv('./activityData.csv')
dir()
for(i in 1:nrow(activities2)){
if(is.na(activities2$steps[i])){
activities2$steps[i] <- stepIntervals[i]
}
}
for(i in 1:nrow(activities2)){
if(is.na(activities2$steps[i])){
activities2$steps[i] <- stepIntervals[i]
}
}
stepDays2 <- with(activityData, tapply(steps, date, sum, na.rm = TRUE))
hist(stepDays2, breaks = 8, xlab = "Steps", ylab = "Total Days", main = "Distribution of Steps Taken Each Day w/ Imputed Values")
